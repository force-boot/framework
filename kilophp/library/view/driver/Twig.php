<?php
/**
 * Created by KiloFrameWork
 * User: xiejiawei<print_f@hotmail.com>
 * Date: 2020/4/14
 * Time: 15:29
 */

namespace kilophp\view\driver;

use Twig\Loader\FilesystemLoader;

use Twig\Environment;

use Twig\Loader\LoaderInterface;
use Twig_SimpleFunction;

/**
 * twig模板引擎
 * @package kilophp\view\driver
 * @author XieJiaWei<print_f@hotmail.com>
 * @version 1.0.2
 */
class Twig extends Environment
{

    /**
     * Twig constructor.
     */
    public function __construct()
    {
        $loader = new FilesystemLoader(config('view.path'));
        parent::__construct($loader, [
            'cache' => config('template.compile_dir'), //设置缓存编译目录
            'charset' => config('base.charset'),//设置显示字符集
            'debug' => config('template.debug') //是否开启调试
        ]);
        //注册Twig全局变量
        $this->registerGlobal();
        //动态注册函数
        $this->autoRegisterFunction();
    }

    /**
     * 注册全局变量
     * @access public
     */
    public function registerGlobal()
    {
        $this->addGlobal('app', [
            'request' => [
                'get' => request()->get(),
                'post' => request()->post(),
                'method' => request()->method(),
                'server' => request()->server(),
                'request' => request()->request(),
                'cookie' => request()->cookie(),
                'session' => request()->session(),
                'domain' => request()->domain(),
                'host' => request()->host(),
                'ip' => request()->ip()
            ]
        ]);
    }


    /**
     * 动态注册函数
     * @access private
     */
    private function autoRegisterFunction()
    {
        $this->registerUndefinedFunctionCallback(function ($name) {
            if (function_exists($name)) {
                return new Twig_SimpleFunction($name, $name);
            }
            return false;
        });
    }

    /**
     * 解析模板文件名
     * @param string $template
     * @access private
     * @return string
     */
    protected function parseTemplate(string $template): string
    {
        //模板文件后缀
        $suffix = config('template.suffix');
        if (empty($template)) {
            $template = request()->action() . $suffix;
        } elseif ('' == pathinfo($template, PATHINFO_EXTENSION)) {
            $template .= $suffix;
        }
        return $template;
    }

    /**
     * 渲染模板输出 支持数组赋值
     * @param string $template
     * @param array $data
     * @access public
     */
    public function show(string $template, array $data = [])
    {
        //解析模板文件名
        $template = $this->parseTemplate($template);
        parent::display($template, $data); // TODO: Change the autogenerated stub
    }
}